-----

### VS Code 워크스페이스 및 파일 관리 요약 (메모장용)

**1. 워크스페이스 이름 정하기 & 열기:**

  * VS Code에서 `파일(File)` \> `폴더 열기(Open Folder...)`를 클릭.
  * **새 프로젝트용 최상위 폴더 (예: `fire_wood_project`)를 만들고 선택.**
  * 이 폴더 이름이 사실상 워크스페이스 이름이 됩니다. VS Code는 이 폴더를 중심으로 파일을 관리합니다.

**2. 폴더 구조 및 파일 관리 (핵심\!):**

  * **가장 중요한 원칙:** **하나의 프로젝트는 하나의 최상위 폴더에\!**

      * 예시: `my_portfolio/` 안에 `fire_wood_project/`, `my_blog_project/` 등 각 프로젝트 폴더를 만듭니다.

  * **각 프로젝트 폴더 안의 파일명 규칙 (권장):**

      * **메인 HTML:** `index.html` (웹 서버의 기본 파일명)
      * **CSS:** `css/style.css` (css 폴더 안에)
      * **JavaScript:** `js/script.js` (js 폴더 안에)
      * **이미지:** `images/` (images 폴더 안에)

  * **예시 폴더 구조:**

    ```
    fire_wood_project/    <-- (이 폴더를 VS Code로 엽니다)
    ├── index.html        <-- 이 프로젝트의 메인 HTML
    ├── css/
    │   └── style.css     <-- 이 프로젝트의 CSS
    ├── js/
    │   └── script.js     <-- 이 프로젝트의 JavaScript
    └── images/           <-- 이 프로젝트의 이미지
        └── ...
    ```

**3. 파일 헷갈리지 않게 관리하는 법:**

  * **VS Code로 '프로젝트 폴더'만 열기:** `fire_wood_project` 폴더 자체를 VS Code로 열면, 사이드바에 해당 프로젝트 파일만 표시되어 다른 프로젝트 파일과 섞일 일이 없습니다.
  * **VS Code의 경로 표시 활용:** VS Code는 같은 이름의 파일이라도, 파일 탭이나 사이드바에서 해당 파일이 속한 상위 폴더 경로를 함께 표시해주므로 혼동을 줄일 수 있습니다.
  * **나중을 위한 팁:**
      * **Git 사용:** Git으로 버전 관리를 하면 잘못 수정하더라도 쉽게 되돌릴 수 있습니다.
      * **다중 루트 워크스페이스 (고급):** 여러 프로젝트를 한 번에 열어야 할 때 사용하지만, 초보 단계에서는 권장하지 않습니다. 하나의 워크스페이스에는 하나의 주된 프로젝트를 담는 것이 좋습니다.

-----

하나의 워크스페이스에 하나의 프로젝트 (가장 일반적)
가장 일반적이고 권장되는 방식은 하나의 VS Code 워크스페이스에 
하나의 독립적인 프로젝트를 담는 것입니다.



예를 들어, 지금 만들고 계시는 장작 판매 홈페이지가 하나의 독립된 프로젝트라면, 
fire_wood 폴더만 VS Code 워크스페이스로 여는 것이 가장 효율적입니다.
